/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=3; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
import java.util.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;

@SuppressWarnings("serial")
public class Robot 
{
	private HashMap<String, Integer> VAR = new HashMap<String, Integer>();
	private HashMap<String, Integer> PROC_Parametro = new HashMap<String, Integer>();
	private HashMap<String, Integer> PROC_Index = new HashMap<String, Integer>();
	private HashMap<String, Arraylist> PROC_Ejecucion = new HashMap<String, Arraylist>();
	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}
TOKEN: /* PROCESOS */
{		   <DEFVAR: "defVar" >
		|  <DEFPROC: "defProc" >
}
TOKEN: /* COMANDOS */
{	
		   <MOVE:  "move">
		|  <PUT: "Put">
		|  <PICK: "Pick">
		|  < POP: "Pop" >
		|  < HOP:  "Hop" >	
		|  <GO: "Go" >
		|  <WALK: "walk" >
		| < JUMP :"jump">
		|  <LEAP: "leap" >
		|  <TURN: "turn" >
		|  <TURNTO: "turnto" >
		|  <DROP: "drop" >
		|  <GET: "get" >
		|  <GRAB: "grab" >
		|  <LETGO: "letGo" >
		|  <NOP: "nop" >
}
TOKEN: /* ESTRUCTURAS */
{
		   <IF: "if" >
		|  <ELSE: "else" >
		|  <WHILE: "while" >
		|  <REPEAT: "repeat" >
		|  <TIMES: "times" >
}
TOKEN: /* condicion */
{
		   <FACING: "facing" >
		|  <CAN: "can" >
		|  <NOT: "not" >
		
}


TOKEN:  /* AUXILIARES*/
{
		   <BALLOONS:  "balloons" >
		|  <CHIPS:     "chips"  >
		|  <idname : (["A"-"Z"] | ["a"-"z"])+ >
		|  <NUM: (["0"-"9"])+ >
		|  <FRONT: "front" >
		|  <RIGHT: "right" >
		|  <LEFT: "left" >
		|  <BACK: "back" >
		|  <AROUND: "around">
		| < NORTH: "north">
		| < SOUTH: "south">
		| < WEST: "west">
		| < EAST: "east">
}
	//boolean command(uniandes.lym.robot.view.Console sistema) :
	
	boolean command(Console sistema):
	{	
		String nameid;
		int x,y;
		salida=new String();	
	}

	
	{
		(
		     (VerifyVar())
		  |	 (defproc())
		  |  (VerifyBlock())

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}
	//DESARROLLLO PARSER Y SINTAXIS 
	void VerifyVar():
	{	
		String nameid;
		int x;
	}
	{
		   <DEFVAR> <idname > { nameid = token.image; } x=num() { VAR.put(nameid, x); }
	}
	
	void VerifyPROC():
	{	
		String nameid;
		Arraylist x;
	}
	{
		   (<DEFPROC> <idname > { nameid = token.image; } x=parametrosPro() { })
	}
	
	ArrayList VerifyBlock():
	{
	  ArrayList resultado= new ArrayList();
	}
	{
	  { return resultado;}
	}
	
	String VerifyComandos():
	{
	  String resultado;
	}
	{
	  		(<MOVE>  "(" x=num() ")" {resultado = "move, "+ Integer.toString(x); return resultado;}  )
		|   (<PUT> "(" { resultado = VerifyPut(); return resultado; } ")")
		|   (<PICK> "(" { resultado = VerifyGet(); return resultado; } ")")
		|   (<POP> "(" x=num() ")" {resultado = "pop, "+ Integer.toString(x); return resultado;})
		|   (<HOP>  "(" x=num() ")" {resultado = "hop, "+ Integer.toString(x); return resultado;})
		|   (<GO>  "(" x=num() "," y=num()")" {resultado = "go, "+ Integer.toString(x)+", " + Integer.toString(y); return resultado;})  				  				
	    |   (<idname > { nameid=token.image; } "=" x=num() {resultado = "assigt, "+nameid +", "+ Integer.toString(x); return resultado; })
	    |   (<JUMP > "(" x=num() "," y=num()")" {resultado = "jump, "+ Integer.toString(x)+", " + Integer.toString(y); return resultado;})
	    | <WALK> "(" Verifywalk()  ")"
	    | < LEAP> "(" VerifyLeap() ")"
	    | < TURN > "(" VerifyTurn() ")"
	    | < TURNTO>  "(" VerifyTurnTo() ")"
	    | 	(< DROP> "(" x=num() ")" {resultado = "drop, "+ Integer.toString(x); return resultado;})
	    |   (<GET> "(" x=num() ")" {resultado = "get, "+ Integer.toString(x); return resultado;})
	    |   (<GRAB>"(" x=num() ")" {resultado = "grab, "+ Integer.toString(x); return resultado;})
	    | 	(<LETGO> "(" x=num() ")" {resultado = "letgo, "+ Integer.toString(x); return resultado;})
	    |   (< NOP> "(" ")" {resultado = "nop"; return resultado;})
	}

	String VerifyPut() :
	{
		int f=1;
		String resultado;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})
		{return resultado; } 
	}

	String VerifyGet() :
	{
		int f=1;
		String resultado;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 
		{return resultado; } 
	}
	void VerifyLeap():
	{
	  	int steps=1;
	}
	{		(steps = num() { world.moveForward(steps,false);
							 salida = "Command : leap S";})
		|	(steps = num()","<FRONT> { world.moveForward(steps,false);
									salida = "Command : leap front";})
		| 	(steps = num()","<RIGHT> {world.turnRight();
										world.moveForward(steps,false);
										world.turnRight();
										world.turnRight();
										world.turnRight();
										salida = "Command : leap right";})
		| 	(steps = num()","<LEFT> {world.turnRight();
									world.turnRight();
									world.turnRight();
									world.moveForward(steps,false);
									world.turnRight();
									 salida = "Command : leap left";})
		| 	(steps = num()","<BACK> {world.turnRight();
									world.turnRight();
									world.moveForward(steps,false);
									world.turnRight();
									world.turnRight();
									salida = "Command : leap back";})
		| 	(steps = num()","<NORTH> {direction(0);
										world.moveForward(steps,false);
										salida = "Command : leap north";})
		| 	(steps = num()","<SOUTH> {direction(1);
										world.moveForward(steps,false);
										salida = "Command : leap south";})
		| 	(steps = num()","<EAST> {direction(2);
										world.moveForward(steps,false);
										salida = "Command : leap EAST";})
		| 	(steps = num()","<WEST> {direction(3);
										world.moveForward(steps,false);
										salida = "Command : leap WEST";})		

	}
	
	void VerifyTurn():
	{
	}
	{
	  		(< RIGHT> {world.turnRight();
	  					salida = "Command : TURN RIGHT";})
		| 	(<LEFT> {world.turnRight();
					world.turnRight();
					world.turnRight();
					salida = "Command : TURN LEFT";})
		| 	(<AROUND> {world.turnRight();
						world.turnRight();
						salida = "Command : TURN AROUND";})
	}
	void  VerifyTurnTo():
	{
	}
	{
	  		(<NORTH> {direction(0);
					salida = "Command : TurnTo north";})
		| 	(<SOUTH> {direction(1);
					salida = "Command : TurnTo south";})
		| 	(<EAST> {direction(2);
					salida = "Command : TurnTo EAST";})
		| 	(<WEST> {direction(3);
					salida = "Command : TurnTo WEST";})
	}
	
	void Verifywalk():
	{
	  int steps=1;
	}
	{
			(steps = num() { world.moveForward(steps,false);
							 salida = "Command : move";})
		|	(steps = num()","<FRONT> { world.moveForward(steps,false);
									salida = "Command : moveFRONT";})
		| 	(steps = num()","<RIGHT> {world.turnRight();
										world.moveForward(steps,false);
										salida = "Command : moveFRONT";})
		| 	(steps = num()","<LEFT> {world.turnRight();
									world.turnRight();
									world.turnRight();
									world.moveForward(steps,false);
									 salida = "Command : moveLEFT";})
		| 	(steps = num()","<BACK> {world.turnRight();
									world.turnRight();
									world.moveForward(steps,false);
									salida = "Command : moveLEFT";})
		| 	(steps = num()","<NORTH> {direction(0);
										world.moveForward(steps,false);
										salida = "Command : leap north";})
		| 	(steps = num()","<SOUTH> {direction(1);
										world.moveForward(steps,false);
										salida = "Command : leap south";})
		| 	(steps = num()","<EAST> {direction(2);
										world.moveForward(steps,false);
										salida = "Command : leap EAST";})
		| 	(steps = num()","<WEST> {direction(3);
										world.moveForward(steps,false);
										salida = "Command : leap WEST";})	
	}
	
	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */
	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}
	ArrayList parametrosPro():
	{	
		int contador = 0;
		int x;
		ArrayList retorno;
	}	
	{
			( "(" )
		| 	(<idname > { nameid = token.image; } "," {retorno.add(nameid); })
		|	(<idname > { nameid = token.image; }{retorno.add(nameid); })
		|   ( x=num(){retorno.add(x); })
		|   ( x=num()","{retorno.add(x); })
		| (")")
		{return retorno;} 
	}
void direction(int O):
	{
	int contador = 0;
	}
	{
	  {
	    while (0!= world.getacing() && contador <= 6) { 
	  		world.turnRight();
	  		contador ++;
	  	}
	  }
	}
void EjecutarAsignar(String Parameter):
{
  	ArrayList orden= Parameter.split(",");
  	int valor=0;
    String llave= orden.get(1);
    if (VAR.containsKey(llave)) {
      valor = Integer.parseInt(orden.get(2));
      VAR.put(llave, valor);
}
{}
void EjecutarMover(String Parameter):
{
}
{
}
void EjecutarComando(String Parameter):
{
  ArrayList Comandos= Parameter.split(",");
  String Comando= Comandos.get(0);
  switch (Comando) {
		case "assigt":
			EjecutarAsignar(Parameter);
        case "move":
        	EjecutarMover(Parameter);
        default:
            sistema.printOutput("Opción no válida");
      }
}
{
}

//BLOQUE
	boolean bloque(Console sistema):
	{
		String instrucciones = "";
	}
	{
	  (
		 "(" s=command() ")" {instrucciones = instrucciones + s;} (";" bloque())*	bloque())+
	
	  {
		return True;
	  }
	}
//estructura

	
