/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{

	private HashMap<String, Integer> VAR = new HashMap<String, Integer>();
	private HashMap<String, Integer> PROC = new HashMap<String, Integer>();
	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}
TOKEN: /* COMANDOS */
{		   <DEFVAR: "defVar" >
		|  <DEFPROC: "defProc" >
}
TOKEN: /* COMANDOS */
{	
		   <MOVE:  "move">
		|  <PUT: "Put">
		|  <PICK: "Pick">
		|  < POP: "Pop" >
		|  < HOP:  "Hop" >	
		|  <GO: "Go" >
		|  <WALK: "walk" >
		| < JUMP :"jump">
		|  <LEAP: "leap" >
		|  <TURN: "turn" >
		|  <TURNTO: "turnto" >
		|  <DROP: "drop" >
		|  <GET: "get" >
		|  <GRAB: "grab" >
		|  <LETGO: "letGo" >
		|  <NOP: "nop" >
}
TOKEN: /* ESTRUCTURAS */
{
		   <IF: "if" >
		|  <ELSE: "else" >
		|  <WHILE: "while" >
		|  <REPEAT: "repeat" >
		|  <TIMES: "times" >
}
TOKEN: /* condicion */
{
		   <FACING: "facing" >
		|  <CAN: "can" >
		|  <NOT: "not" >
		
}


TOKEN:  /* AUXILIARES*/
{
		   <BALLOONS:  "balloons" >
		|  <CHIPS:     "chips"  >
		|  <idname : (["A"-"Z"] | ["a"-"z"])+ >
		|  <NUM: (["0"-"9"])+ >
		|  <FRONT: "front" >
		|  <RIGHT: "right" >
		|  <LEFT: "left" >
		|  <BACK: "back" >
		|  <AROUND: "around">
		| < NORTH: "north">
		| < SOUTH: "south">
		| < WEST: "west">
		| < EAST: "east">
}

	boolean defvar(Console sistema):
	{	
		String nameid;
		int x;
		salida=new String();	
	}

	
	{
		(
		  (
		   <DEFVAR> nameid = <idname > x=num() { VAR.put(nameid, x);salida = "Command: def var ";}	    
		) 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}
	
	boolean defproc(Console sistema):
	{	
		String nameid;
		int x;
		salida=new String();	
	}

	
	{
		(
		  (
		   <DEFPROC> nameid = <idname > "(" x=parametrosPro()")" { VAR.put(nameid, x);salida = "Command: def proc ";}	    
		) 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	
	//boolean command(uniandes.lym.robot.view.Console sistema) :
	
	boolean command(Console sistema):
	{	
		String nameid;
		int x,y;
		salida=new String();	
	}

	
	{
		(		  (
		   <MOVE>  "(" x=num() ")" {world.moveForward(x,false);
		   							salida = "Command: Moveforward ";}  
		|  <PUT> "("  put() ")"
		|  <PICK> "(" get()  ")"
		|  <POP> "(" x=num() ")" {world.popBalloons(x);
								 salida = "Comando:  Pop";}
		|  <HOP>  "(" x=num() ")" {world.moveForward(x,true);
									salida = "Command:Hopforward ";}
		|  <GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);
								salida = "Command:GO ";}  				  				
	    |  nameid = <idname > "=" x=num() { VAR.put(nameid, x);salida = "Command:Assignar ";}
	    | <JUMP > "(" x=num() "," y=num()")" {world.popBalloons(x);
								 salida = "Comando:  Pop";}
	    | <WALK> "(" Verifywalk()  ")"
	    | < LEAP> "(" VerifyLeap() ")"
	    | < TURN > "(" VerifyTurn() ")"
	    | < TURNTO>  "(" VerifyTurnTo() ")"
	    | < DROP> "(" x=num() ")" {world.pickChips(x);
	    							salida = "Command:Grab ";}
	    | < GET> "(" x=num() ")" {world.pickChips(x);
	    							salida = "Command:Grab ";}
	    | < GRAB>"(" x=num() ")" {world.grabBalloons(x);
	    							salida = "Command:Grab ";}
	    | < LETGO> "(" x=num() ")" {world.putBalloons(x);
	    							salida = "Command:letGo ";}
	    | < NOP> "(" ")" {salida = "Command:Nop ";}
	    
		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}
	void VerifyLeap():
	{
	  	int steps=1;
	}
	{		(steps = num() { world.moveForward(steps,false);
							 salida = "Command : leap S";})
		|	(steps = num()","<FRONT> { world.moveForward(steps,false);
									salida = "Command : leap front";})
		| 	(steps = num()","<RIGHT> {world.turnRight();
										world.moveForward(steps,false);
										world.turnRight();
										world.turnRight();
										world.turnRight();
										salida = "Command : leap right";})
		| 	(steps = num()","<LEFT> {world.turnRight();
									world.turnRight();
									world.turnRight();
									world.moveForward(steps,false);
									world.turnRight();
									 salida = "Command : leap left";})
		| 	(steps = num()","<BACK> {world.turnRight();
									world.turnRight();
									world.moveForward(steps,false);
									world.turnRight();
									world.turnRight();
									salida = "Command : leap back";})
		| 	(steps = num()","<NORTH> {direction(0);
										world.moveForward(steps,false);
										salida = "Command : leap north";})
		| 	(steps = num()","<SOUTH> {direction(1);
										world.moveForward(steps,false);
										salida = "Command : leap south";})
		| 	(steps = num()","<EAST> {direction(2);
										world.moveForward(steps,false);
										salida = "Command : leap EAST";})
		| 	(steps = num()","<WEST> {direction(3);
										world.moveForward(steps,false);
										salida = "Command : leap WEST";})		

	}
	
	void VerifyTurn():
	{
	}
	{
	  		(< RIGHT> {world.turnRight();
	  					salida = "Command : TURN RIGHT";})
		| 	(<LEFT> {world.turnRight();
					world.turnRight();
					world.turnRight();
					salida = "Command : TURN LEFT";})
		| 	(<AROUND> {world.turnRight();
						world.turnRight();
						salida = "Command : TURN AROUND";})
	}
	void  VerifyTurnTo():
	{
	}
	{
	  		(<NORTH> {direction(0);
					salida = "Command : TurnTo north";})
		| 	(<SOUTH> {direction(1);
					salida = "Command : TurnTo south";})
		| 	(<EAST> {direction(2);
					salida = "Command : TurnTo EAST";})
		| 	(<WEST> {direction(3);
					salida = "Command : TurnTo WEST";})
	}
	
	void Verifywalk():
	{
	  int steps=1;
	}
	{
			(steps = num() { world.moveForward(steps,false);
							 salida = "Command : move";})
		|	(steps = num()","<FRONT> { world.moveForward(steps,false);
									salida = "Command : moveFRONT";})
		| 	(steps = num()","<RIGHT> {world.turnRight();
										world.moveForward(steps,false);
										salida = "Command : moveFRONT";})
		| 	(steps = num()","<LEFT> {world.turnRight();
									world.turnRight();
									world.turnRight();
									world.moveForward(steps,false);
									 salida = "Command : moveLEFT";})
		| 	(steps = num()","<BACK> {world.turnRight();
									world.turnRight();
									world.moveForward(steps,false);
									salida = "Command : moveLEFT";})
		| 	(steps = num()","<NORTH> {direction(0);
										world.moveForward(steps,false);
										salida = "Command : leap north";})
		| 	(steps = num()","<SOUTH> {direction(1);
										world.moveForward(steps,false);
										salida = "Command : leap south";})
		| 	(steps = num()","<EAST> {direction(2);
										world.moveForward(steps,false);
										salida = "Command : leap EAST";})
		| 	(steps = num()","<WEST> {direction(3);
										world.moveForward(steps,false);
										salida = "Command : leap WEST";})	
	}
	
	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */
	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}
	int parametrosPro():
	{	
		int contador = 0;
		int x;	
	}	
	{
		(
		  (<idname >{contador ++;}
	    | x=num(){contador ++;}
		) "," 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
			return contador;
		})+
		| <EOF> {return -1;} 
	}



		
	void direction_leap(int Orien):
	{
	int contador = 0;
	while (Orien!= world.getfacing() && contador <= 6) { 
	  world.turnRight();
	  contador ++;
	  }
	}
	{ }
	