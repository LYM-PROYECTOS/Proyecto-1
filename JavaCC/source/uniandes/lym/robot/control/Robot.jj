/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{

	private HashMap<String, Integer> VAR = new HashMap<String, Integer>();
	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}
TOKEN: /* COMANDOS */
{		   <DEFVAR: "defVar" >
		|  <DEFPROC: "defProc" >
}
TOKEN: /* COMANDOS */
{	
		   <MOVE:  "move">
		|  <RIGHT: "right">
		|  <PUT: "Put">
		|  <PICK: "Pick">
		|  < POP: "Pop" >
		|  < HOP:  "Hop" >	
		|  <GO: "Go" >
		|  <WALK: "walk" >
		|  <LEAP: "leap" >
		|  <TURN: "turn" >
		|  <TURNTO: "turnto" >
		|  <DROP: "drop" >
		|  <GET: "get" >
		|  <GRAB: "grab" >
		|  <LETGO: "letGo" >
		|  <NOP: "nop" >
}
TOKEN: /* ESTRUCTURAS */
{
		   <IF: "if" >
		|  <ELSE: "else" >
		|  <WHILE: "while" >
		|  <REPEAT: "repeat" >
		|  <TIMES: "times" >
}
TOKEN: /* condicion */
{
		   <FACING: "facing" >
		|  <CAN: "can" >
		|  <NOT: "not" >
		
}


TOKEN:  /* AUXILIARES*/
{
		   <BALLOONS:  "balloons" >
		|  <CHIPS:     "chips"  >
		|  <idname : (["A"-"Z"] | ["a"-"z"])+ >
		|  <NUM: (["0"-"9"])+ >
		|  <FRONT: "front" >
		|  <RIGHT: "right" >
		|  <LEFT: "left" >
		|  <BACK: "back" >
		|  <: "" >
		|  <: "" >
		|  <: "" >
		|  <: "" >
		|  <: "" >
		|  <: "" >

}

	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		(		  (
		   <MOVE>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		|  <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";} 
		|  <PUT> "("  put() ")"
		|  <PICK> "(" get()  ")"
		|  <POP> "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		|  <HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Hopforward ";}
		|  <GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  				  				
	    |  <idname > "=" x=num() { ;salida = "Command:Assignar ";}
	    | <WALK> "(" Verifywalk()  ")"
	    | < LEAP> "(" VerifyLeap() ")"
	    | < TURN > "(" VerifyTurn() ")"
	    | < TURNTO>
	    | < DROP>
	    | < GET>
	    | < GRAB>
	    | < LETGO> "(" x=num() ")" {world.putBalloons(x);salida = "Command:letGo ";}
	    | < NOP> "(" ")" {salida = "Command:Nop ";}
	    
		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}
	void VerifyLeap()
	{
	}
	{
	}
	void VerifyLeap()
	{
	}
	{
	}
	void Verifywalk():
	{
	  int steps=1;
	}
	{
			(steps = num() { world.moveForward(steps,false); salida = "Command : move";})
		|	(steps = num()","<FRONT> { world.moveForward(steps,false); salida = "Command : moveFRONT";})
		| 	(steps = num()","<RIGHT> {world.turnRight(); world.moveForward(steps,false); salida = "Command : moveFRONT";})
		| 	(steps = num()","<LEFT> {world.turnRight();world.turnRight();world.turnRight();world.moveForward(steps,false); salida = "Command : moveLEFT";})
		| 	(steps = num()","<BACK> {world.turnRight();world.turnRight();world.moveForward(steps,false); salida = "Command : moveLEFT";})
		
	}
	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */
	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}
	