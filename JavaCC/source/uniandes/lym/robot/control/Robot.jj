/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=3; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;
import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
import java.util.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;
import java.awt.Point;

@SuppressWarnings("serial")
public class Robot 
{
	private HashMap<String, Integer> VAR = new HashMap<String, Integer>();
	private HashMap<String, Integer> PROC_Parametro = new HashMap<String, Integer>();
	private HashMap<String, Integer> PROC_Index = new HashMap<String, Integer>();
	private HashMap<String, Arraylist> PROC_Ejecucion = new HashMap<String, Arraylist>();
	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}
TOKEN: /* PROCESOS */
{		   <DEFVAR: "defVar" >
		|  <DEFPROC: "defProc" >
}
TOKEN: /* COMANDOS */
{	
		   <MOVE:  "move">
		|  <PUT: "Put">
		|  <PICK: "Pick">
		|  < POP: "Pop" >
		|  < HOP:  "Hop" >	
		|  <GO: "Go" >
		|  <WALK: "walk" >
		| < JUMP :"jump">
		|  <LEAP: "leap" >
		|  <TURN: "turn" >
		|  <TURNTO: "turnto" >
		|  <DROP: "drop" >
		|  <GET: "get" >
		|  <GRAB: "grab" >
		|  <LETGO: "letGo" >
		|  <NOP: "nop" >
}
TOKEN: /* ESTRUCTURAS */
{
		   <IF: "if" >
		|  <ELSE: "else" >
		|  <WHILE: "while" >
		|  <REPEAT: "repeat" >
		|  <TIMES: "times" >
}
TOKEN: /* condicion */
{
		   <FACING: "facing" >
		|  <CAN: "can" >
		|  <NOT: "not" >
		
}


TOKEN:  /* AUXILIARES*/
{
		   <BALLOONS:  "balloons" >
		|  <CHIPS:     "chips"  >
		|  <idname : (["A"-"Z"] | ["a"-"z"])+ >
		|  <NUM: (["0"-"9"])+ >
		|  <FRONT: "front" >
		|  <RIGHT: "right" >
		|  <LEFT: "left" >
		|  <BACK: "back" >
		|  <AROUND: "around">
		| < NORTH: "north">
		| < SOUTH: "south">
		| < WEST: "west">
		| < EAST: "east">
}
	//boolean command(uniandes.lym.robot.view.Console sistema) :
	
	boolean command(Console sistema):
	{	
		String nameid;
		int x,y;
		salida=new String();	
	}

	
	{
		(
		     (VerifyVar())
		  |	 (defproc())
		  |  (VerifyBlock())

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}
	//DESARROLLLO PARSER Y SINTAXIS 
	void VerifyVar():
	{	
		String nameid;
		int x;
	}
	{
		   <DEFVAR> <idname > { nameid = token.image; } x=num() { VAR.put(nameid, x); }
	}
	
	void VerifyPROC():
	{	
		String nameid;
		ArrayList<Object> x = new ArrayList<>();
	}
	{
		   (<DEFPROC> <idname > { nameid = token.image; } x=parametrosPro())
	}
	
	ArrayList VerifyBlock():
	{
	 ArrayList<Object> resultado = new ArrayList<>();
	 ArrayList<Object> arreglo = new ArrayList<>();
	 String str;
	}
	{
	 (
	   "{" (({arreglo = VerifyWhile() ;resultado.add(arreglo);}| {arreglo = VerifyIf();resultado.add(arreglo);}| { str = VerifyComandos() ;resultado.add(str);}| {arreglo=VerifyRepeat();resultado.add(arreglo);} | { arreglo = VerifyProc1();resultado.add(arreglo); })
	   ("," {arreglo = VerifyWhile() ;resultado.add(arreglo);}| {arreglo = VerifyIf();resultado.add(arreglo);}| { str = VerifyComandos() ;resultado.add(str);}| {arreglo=VerifyRepeat();resultado.add(arreglo);} | { arreglo = VerifyProc1();resultado.add(arreglo); })*)*"}"
     ){return resultado;}
	}

	
	ArrayList VerifyWhile():
	{
	String condicion;
	ArrayList<Object> bloque = new ArrayList<>();
	ArrayList<Object> resultado = new ArrayList<>();
	}
	{
	  <WHILE > { condicion = VerifyCondicion();} { bloque = VerifyBlock();} {resultado.add("while");resultado.add(condicion);resultado.add(bloque); }
	  {return resultado; } 
	}
	
	String VerifyCondicion():
	{
	   string resultado ="";
	}
	{
	    	( { resultado =facing() ;})
	    | 	( { resultado =can(); })
	    | 	( { resultado =not() ;})
		{return resultado;}
	}
	String facing():
		{
		  String resultado;
		}
		{
		    <FACING> "(" (<NORTH>)|(<SOUTH>)|(<EAST>)|(<WEST>) { resultado =token.image();}")" 
			{ resultado = "facing,"+resultado;
			  return resultado; }
		}
		
	String can():
		{
		  String resultado;
		}
		{
		  <CAN> "(" {resultado =VerifyComandos();} ")"
		  {	resultado = "can,"+resultado;   return resultado; }
		}

		 
	String not():
		{
		  String resultado;
		}
		{
		   <NOT> ":" ({ resultado= can(); })|({ resultado=facing(); })		
		 {	resultado = "not,"+resultado; return resultado; }
		}

	ArrayList VerifyIf():
	{
	String condicion;
	ArrayList<Object> bloque1 = new ArrayList<>();
	ArrayList<Object> bloque2 = new ArrayList<>();
	ArrayList<Object> resultado = new ArrayList<>();
	}
	{
	  (<IF> { condicion = VerifyCondicion();} { bloque = VerifyBlock();} (<ELSE> { bloque = VerifyBlock();}) {resultado.add("If");resultado.add(condicion);resultado.add(bloque);resultado.add("else");resultado.add(bloque2); } )
	  {return resultado; } 
	}
	ArrayList VerifyRepeat():
	{
	  ArrayList<Object> bloque = new ArrayList<>();
	  int x;
	  ArrayList<Object> resultado = new ArrayList<>();
	}
	{
	  (<REPEAT> x=num() {bloque = VerifyBlock();} {resultado.add("Repeat");resultado.add(x);reultado.add(bloque);})
	  {return resultado;}
	}
	String VerifyComandos():
	{
	  String resultado;
	}
	{
	     	(<idname > { nameid=token.image; } "=" { x=VarORNum(); } {resultado = "assigt,"+nameid +","+ Integer.toString(x);})
	    |   (<JUMP > "(" { x=VarORNum(); } "," { y=num(); }")" {resultado = "jump,"+ Integer.toString(x)+"," + Integer.toString(y);})
	    |   (<WALK> "(" { resultado = Verifywalk(); }  ")")
	    |   (< LEAP> "(" { resultado =VerifyLeap(); } ")")
	    |   (< TURN > "(" { resultado =VerifyTurn(); } ")")
	    |   (< TURNTO>  "(" { resultado =VerifyTurnTo(); } ")")
	    | 	(< DROP> "(" { x=VarORNum(); } ")" {resultado = "drop,"+ Integer.toString(x); })
	    |   (<GET> "(" { x=VarORNum(); } ")" {resultado = "get,"+ Integer.toString(x); })
	    |   (<GRAB>"(" { x=VarORNum(); } ")" {resultado = "grab,"+ Integer.toString(x); })
	    | 	(<LETGO> "(" { x=VarORNum(); } ")" {resultado = "letgo,"+ Integer.toString(x); })
	    |   (< NOP> "(" ")" {resultado = "nop";})
	    { return resultado;}
	}

	String VerifyLeap():
	{
	  	int steps=1;
	  	String resultado;	
	}
	{		( { steps = num();resultado = "leap," +Integer.toString(steps);})
		|	( { steps = num() }","<FRONT> {resultado = "leap,front" +Integer.toString(steps);})
		| 	( { steps = num() }","<RIGHT> {resultado = "leap,right" +Integer.toString(steps);})
		| 	( { steps = num() }","<LEFT> {resultado = "leap,left" +Integer.toString(steps);})
		| 	( { steps = num() }","<BACK> {resultado = "leap,back" +Integer.toString(steps);})
		| 	( { steps = num() }","<NORTH> {resultado = "leap,north" +Integer.toString(steps);})
		| 	( { steps = num() }","<SOUTH> {resultado = "leap,south" +Integer.toString(steps);})
		| 	( { steps = num() }","<EAST> {resultado = "leap,east" +Integer.toString(steps);})
		| 	( { steps = num() }","<WEST> {resultado = "leap,west" +Integer.toString(steps);})		
		{return resultado; } 
	}
	
	String VerifyTurn():
	{
	  String resultado;	
	}
	{
	  		(< RIGHT> {resultado = "turn,right";})
		| 	(<LEFT> {resultado = "turn,left";})
		| 	(<AROUND> {resultado = "turn,around";})
		{return resultado; } 
	}

	
	String VerifyTurnTo():
	{
	  String resultado;
	}
	{
	  		(<NORTH> {resultado = "turnto,north";})
		| 	(<SOUTH> {resultado = "turnto,south";})
		| 	(<EAST> {resultado = "turnto,east";})
		| 	(<WEST> {resultado = "turnto,west";})
		{return resultado; } 
	}
	
	String Verifywalk():
	{
	  int steps=1;
	  String resultado="";
	}
	{
			(steps = num() {resultado = "walk," +Integer.toString(steps);})
		|	(steps = num()","<FRONT> { resultado = "walk,front" +Integer.toString(steps);})
		| 	(steps = num()","<RIGHT> {resultado = "walk,right" +Integer.toString(steps);})
		| 	(steps = num()","<LEFT> {resultado = "walk,left" +Integer.toString(steps);})
		| 	(steps = num()","<BACK> {resultado = "walk,back" +Integer.toString(steps);})
		| 	(steps = num()","<NORTH> {resultado = "walk,north" +Integer.toString(steps);})
		| 	(steps = num()","<SOUTH> {resultado = "walk,south" +Integer.toString(steps);})
		| 	(steps = num()","<EAST> {resultado = "walk,east" +Integer.toString(steps);})
		| 	(steps = num()","<WEST> {resultado = "walk,west" +Integer.toString(steps);})
		{return resultado; } 	
	}
	
	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */
	int num() throws Error
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}
	
	ArrayList parametrosPro():
	{	
		int contador = 0;
		int x;
		ArrayList<Object> retorno = new ArrayList<>();
	}	
	{
	"(" ((<idname > { nameid = token.image; } {retorno.add(nameid); } | x=num(){retorno.add(x); }) ("," (<idname > { nameid = token.image; } {retorno.add(nameid); } | x=num(){retorno.add(x); }))* )* ")"
		{return retorno;} 
	}
void direction(int Orientacion):
	{
	int contador = 0;
	while (Orientacion != world.getFacing() && contador <= 6) { 
	  		world.turnRight();
	  		contador ++;
	  	}
	}
	{
	}


void EjecutarComando(String Parameter):
{
  ArrayList Comandos= Parameter.split(",");
  String Comando= Comandos.get(0);
  switch (Comando) {
        case "walk":
        	if (Comandos.length > 2) {
        	  	String direcion= Comandos.get(1);
        	  	steps = Integer.parseInt(Comandos.get(2));
        	  	switch (direcion) {
					case "front":
						world.moveForward(steps,false);
					case "right":
						world.turnRight();
						world.moveForward(steps,false);
					case "left":
						world.turnRight();
						world.turnRight();
						world.turnRight();
						world.moveForward(steps,false);
					case "back":
						world.turnRight();
						world.turnRight();
						world.moveForward(steps,false);
					case "north":
						direction(0);
						world.moveForward(steps,false);
					case "south":
						direction(1);
						world.moveForward(steps,false);
					case "east":
						direction(2);
						world.moveForward(steps,false);
					default:
						direction(3);
						world.moveForward(steps,false);
        		}
       		}
       		else {
            	steps = Integer.parseInt(Comandos.get(1));
            	world.moveForward(steps,false);
        }
		case "assigt":
		  	int valor=0;
		    String llave= Comandos.get(1);
		    if (VAR.containsKey(llave)) {
		      valor = Integer.parseInt(Comandos.get(2));
		      VAR.put(llave, valor); }
		case "jump":
			int x = Integer.parseInt(Comandos.get(1));
			int y = Integer.parseInt(Comandos.get(2));
			world.setPostion(x,y);
		case "leap":
			if (Comandos.length > 2) {
        	  	String direcion= Comandos.get(1);
        	  	steps = Integer.parseInt(Comandos.get(2));
        	  	switch (direcion) {
					case "front":
						world.moveForward(steps,true);
					case "right":
						world.turnRight();
						world.moveForward(steps,true);
					case "left":
						world.turnRight();
						world.turnRight();
						world.turnRight();
						world.moveForward(steps,true);
					case "back":
						world.turnRight();
						world.turnRight();
						world.moveForward(steps,true);
					case "north":
						direction(0);
						world.moveForward(steps,true);
					case "south":
						direction(1);
						world.moveForward(steps,true);
					case "east":
						direction(2);
						world.moveForward(steps,true);
					default:
						direction(3);
						world.moveForward(steps,true);
        		}
       		}
       		else {
            	steps = Integer.parseInt(Comandos.get(1));
            	world.moveForward(steps,true);
        }
		case "turn":
			String direcion= Comandos.get(1);
			switch (direcion) {
					case "right":
						world.turnRight();
					case "left":
						world.turnRight();
						world.turnRight();
						world.turnRight();
			
					default:
						world.turnRight();
						world.turnRight();
        	}
		case "turnto":
			String direcion= Comandos.get(1);
			switch (direcion) {
					case "north":
						direction(0);
					case "south":
						direction(1);
					case "east":
						direction(2);
					default:
						direction(3);
        	}
		case "drop":
		case "get":
		case "grab":
		case "letgo":
		case "nop":
        default:
       sistema.printOutput("Opción no válida");
      }
}
{
}
int VarORNum():
	{	
		int total=0;
		String name;
	}
	{
		  (<NUM>{total = Integer.parseInt(token.image);})
		| (<ID> {name = token.image; if (Variables.containsKey(name.toLowerCase())) { total = Variables.get(name.toLowerCase()); }})
		{return total; }
	}
//BLOQUE
	boolean bloque(ArrayListPROC_Ejecucion):
	{
		String instrucciones = "";
		
	}
	{
	  {for(len PROC_Ejecucion)
	   
	  }
	 
	}

//estructura
boolean ejecutarCondicion(String Parameter):
{
  boolean funciona;
  ArrayList condiciones= Parameter.split(",");
  String Condicion= condiciones.get(0);
  switch (Condicion) {
        case "can":
        	if (condiciones.length > 2) {
        	  	String Comando= condiciones.get(1);
        	  	switch (comando) {
        			case "walk":
        				
    					Point actual = getPosition();
    					int n = world.getN();
    					int x= actual.getX();
    					int y= actual.getY();
        				if (condiciones.length ==2) {
        				  	int orientacion = getFacing();
        				  	int steps =Integer.parseInt(condiciones.get(2));
        					switch (orientacion) {
        						case 0:        							
        							if((y - steps) >= 0 && (y - steps) < n && !world.isBlocked(actual))
	        							{ funciona = true;}
	        							else { funciona = false;}
        						case 1:
        							if((y + steps)>= 0 && (y + steps) < n && !world.isBlocked(actual))
	        							{ funciona = true;}
	        							else { funciona = false;}
        						case 2:
        							if((x + steps) >= 0 && (x + steps) < n && !world.isBlocked(actual))
	        							{ funciona = true;}
	        							else { funciona = false;}

        						default:
        							if((x - steps) >= 0 && (x - steps) < n && !world.isBlocked(actual))
	        							{ funciona = true;}
	        							else { funciona = false;}
					 }
        				else if (condiciones.length ==3) {
        				  	string direccion =condiciones.get(2);
        				  	switch (direccion) {
        				  	  case "north":
        				  	  		int orientacion = 0;
        				  	  case "south":
        				  	  		int orientacion = 1 ;
        				  	  case "east":
        				  	  		int orientacion = 2;        				  	  
        				  	  case "west":
        				  	  	 	int orientacion =3;
        				  	 	  }
	        				  	 }
	        					}        			 	
        				  	int steps =Integer.parseInt(condiciones.get(3));
        					switch (orientacion) {
        						case 0:        							
        							if((y - steps) >= 0 && (y - steps) < n && !world.isBlocked(actual))
	        							{ funciona = true;}
	        							else { funciona = false;}
        						case 1:
        							if((y + steps)>= 0 && (y + steps) < n && !world.isBlocked(actual))
	        							{ funciona = true;}
	        							else { funciona = false;}
        						case 2:
        							if((x + steps) >= 0 && (x + steps) < n && !world.isBlocked(actual))
	        							{ funciona = true;}
	        							else { funciona = false;}

        						default:
        							if((x - steps) >= 0 && (x - steps) < n && !world.isBlocked(actual))
	        							{ funciona = true;}
	        							else { funciona = false;}
	        					}
	        				else if (condiciones.length ==3):
	        					string direccion =condiciones.get(1);
	        					int mira = getFacing();
	        					int steps =Integer.parseInt(condiciones.get(3));
        				  	  	switch(direccion) {
								 	case "forward":
								 	 	switch(mira):
								 	 		case 0 :
								 	 		 	if ((y-steps)>= 0 &&(y-steps)< n && !word.isBlocked(actual))
								 	 		 	{ funciona = true;}
	        										else { funciona = false;}
								 			case 1:
        										if((y + steps)>= 0 && (y + steps) < n && !world.isBlocked(actual))
	        									{ funciona = true;}
	        										else { funciona = false;}
        									case 2:
        										if((x + steps) >= 0 && (x + steps) < n && !world.isBlocked(actual))
	        									{ funciona = true;}
	        									else { funciona = false;}

			        						default:
			        							if((x - steps) >= 0 && (x - steps) < n && !world.isBlocked(actual))
				        							{ funciona = true;}
				        							else { funciona = false;}
				        			case "back":
								 	 		case 0 :
								 	 		 	if ((y + steps)>= 0 &&(y + steps)< n && !word.isBlocked(actual))
								 			case 1:
        										if((y - steps)>= 0 && (y - steps) < n && !world.isBlocked(actual))
	        									{ funciona = true;}
	        										else { funciona = false;}
        									case 2:
        										if((x - steps) >= 0 && (x - steps) < n && !world.isBlocked(actual))
	        									{ funciona = true;}
	        									else { funciona = false;}

			        						default:
			        							if((x + steps) >= 0 && (x + steps) < n && !world.isBlocked(actual))
				        							{ funciona = true;}
				        							else { funciona = false;}
				        			case "right":
								 	 		case 0 :
								 	 		 	if ((x + steps)>= 0 &&(x + steps)< n && !word.isBlocked(actual))
								 			case 1:
        										if((x - steps)>= 0 && (x - steps) < n && !world.isBlocked(actual))
	        									{ funciona = true;}
	        										else { funciona = false;}
        									case 2:
        										if((y + steps) >= 0 && (y + steps) < n && !world.isBlocked(actual))
	        									{ funciona = true;}
	        									else { funciona = false;}

			        						default:
			        							if((y - steps) >= 0 && (y - steps) < n && !world.isBlocked(actual))
				        							{ funciona = true;}
				        							else { funciona = false;}		
        				  	  	  
				        			default:
								 	 		case 0 :
								 	 		 	if ((x - steps)>= 0 &&(x - steps)< n && !word.isBlocked(actual))
								 			case 1:
        										if((x + steps)>= 0 && (x + steps) < n && !world.isBlocked(actual))
	        									{ funciona = true;}
	        										else { funciona = false;}
        									case 2:
        										if((y - steps) >= 0 && (y - steps) < n && !world.isBlocked(actual))
	        									{ funciona = true;}
	        									else { funciona = false;}

			        						default:
			        							if((y + steps) >= 0 && (y + steps) < n && !world.isBlocked(actual))
				        							{ funciona = true;}
				        							else { funciona = false;}		
        				  	  	  }
	        				}
				           } 		

        			case "jump":
    					int n =world.getN();
						int x = condiciones.get(2)
						int y = condiciones.get(3)
						Point puntojump = new Point(x,y);
    					if ((y < n) && (x < n) && !world.isBlocked(puntojump))
 							{ funciona = true;}
				        	else { funciona = false;}	
        			case "leap":
        				
    					Point actual = getPosition();
    					int n =world.getN();
    					int x= actual.getX();
    					int y= actual.getY();
        				if (condiciones.length ==2) {
        				  	int orientacion = getFacing();
        				  	int steps =Integer.parseInt(condiciones.get(2));
        					switch (orientacion) {
        						case 0:        							
        							if((y - steps) >= 0 && (y - steps) < n && !world.isBlocked(actual))
	        							{ funciona = true;}
	        							else { funciona = false;}
        						case 1:
        							if((y + steps)>= 0 && (y + steps) < n && !world.isBlocked(actual))
	        							{ funciona = true;}
	        							else { funciona = false;}
        						case 2:
        							if((x + steps) >= 0 && (x + steps) < n && !world.isBlocked(actual))
	        							{ funciona = true;}
	        							else { funciona = false;}

        						default:
        							if((x - steps) >= 0 && (x - steps) < n && !world.isBlocked(actual))
	        							{ funciona = true;}
	        							else { funciona = false;}
	        					}
	        			}
        				else if (condiciones.length ==3) {
        				  	string direccion =condiciones.get(2);
        				  	switch (direccion) {
        				  	  case "north":
        				  	  		int orientacion = 0;
        				  	  case "south":
        				  	  		int orientacion = 1 ;
        				  	  case "east":
        				  	  		int orientacion = 2;        				  	  
        				  	  case "west":
        				  	  	 	int orientacion =3;
        				  	  }
        				  	int steps =Integer.parseInt(condiciones.get(3));
        					switch (orientacion) {
        						case 0:        							
        							if((y - steps) >= 0 && (y - steps) < n && !world.isBlocked(actual))
	        							{ funciona = true;}
	        							else { funciona = false;}
        						case 1:
        							if((y + steps)>= 0 && (y + steps) < n && !world.isBlocked(actual))
	        							{ funciona = true;}
	        							else { funciona = false;}
        						case 2:
        							if((x + steps) >= 0 && (x + steps) < n && !world.isBlocked(actual))
	        							{ funciona = true;}
	        							else { funciona = false;}

        						default:
        							if((x - steps) >= 0 && (x - steps) < n && !world.isBlocked(actual))
	        							{ funciona = true;}
	        							else { funciona = false;}
	        					}
	        			}	        						
	        				else if (condiciones.length ==3): { 
	        				   string direccion =condiciones.get(2);
	        					int mira = getFacing();
	        					int steps =Integer.parseInt(condiciones.get(3));
        				  	  	switch(direccion) {
								 	case "forward":
								 	 	switch(mira):
								 	 		case 0 :
								 	 		 	if ((y-steps)>= 0 &&(y-steps)< n && !word.isBlocked(actual))
								 			case 1:
        										if((y + steps)>= 0 && (y + steps) < n && !world.isBlocked(actual))
	        									{ funciona = true;}
	        										else { funciona = false;}
        									case 2:
        										if((x + steps) >= 0 && (x + steps) < n && !world.isBlocked(actual))
	        									{ funciona = true;}
	        									else { funciona = false;}

			        						default:
			        							if((x - steps) >= 0 && (x - steps) < n && !world.isBlocked(actual))
				        							{ funciona = true;}
				        							else { funciona = false;}
				        			case "back":
								 	 		case 0 :
								 	 		 	if ((y + steps)>= 0 &&(y + steps)< n && !word.isBlocked(actual))
								 			case 1:
        										if((y - steps)>= 0 && (y - steps) < n && !world.isBlocked(actual))
	        									{ funciona = true;}
	        										else { funciona = false;}
        									case 2:
        										if((x - steps) >= 0 && (x - steps) < n && !world.isBlocked(actual))
	        									{ funciona = true;}
	        									else { funciona = false;}

			        						default:
			        							if((x + steps) >= 0 && (x + steps) < n && !world.isBlocked(actual))
				        							{ funciona = true;}
				        							else { funciona = false;}
				        			case "right":
								 	 		case 0 :
								 	 		 	if ((x + steps)>= 0 &&(x + steps)< n && !word.isBlocked(actual))
								 			case 1:
        										if((x - steps)>= 0 && (x - steps) < n && !world.isBlocked(actual))
	        									{ funciona = true;}
	        										else { funciona = false;}
        									case 2:
        										if((y + steps) >= 0 && (y + steps) < n && !world.isBlocked(actual))
	        									{ funciona = true;}
	        									else { funciona = false;}
		
			        						default:
			        							if((y - steps) >= 0 && (y - steps) < n && !world.isBlocked(actual))
				        							{ funciona = true;}
				        							else { funciona = false;}		
        				  	  	  
				        		default:
						 	 		case 0 :
						 	 		 	if ((x - steps)>= 0 &&(x - steps)< n && !word.isBlocked(actual))
						 	 		 	{ funciona = true;}
    										else { funciona = false;}
						 			case 1:
										if((x + steps)>= 0 && (x + steps) < n && !world.isBlocked(actual))
    									{ funciona = true;}
    										else { funciona = false;}
									case 2:
										if((y - steps) >= 0 && (y - steps) < n && !world.isBlocked(actual))
    									{ funciona = true;}
    									else { funciona = false;}

	        						default:
	        							if((y + steps) >= 0 && (y + steps) < n && !world.isBlocked(actual))
		        							{ funciona = true;}
		        							else { funciona = false;}		
				  	  	  			}
	        					}
	        					
					case "turnto":
						{funciona = true;}
					case "turn":
	        			{funciona = true;}		        				 	 
        		    case"get":
    				 int cchips= condiciones.get(2);
    				 int chipsdisp= world.chipExists();
    				 if(cchips == 1)
    				 	{ funciona true;}
 					 	else {funciona false;}
				
					case"assigt":
					if (VAR.containsKey(llave))
						{ funciona = true;} else
						{ funciona = false;}
      
						
					case "drop":
						 cosaabotar = condiciones.get(1);
        				 Point actual = getPosition();
    		  		 	 int chipsdisp = world.getMyChips();
    				 	 int cchips= condiciones.get(2);
    				 	 boolean chippos = world.chipExists();
    				 	 Point actual = getPosition();
    				 	 int balloons= countBalloons();
    					 int y= actual.getY();
						 int b= world.getObstacle();
						 if(chipsdisp <= cchips && chippos==false && cchips < b && cchips < y && balloons==0 )
						 	{funciona true;}
						   else { funciona = false;}
					case "grab":
						int popglobos = condiciones.get(2);
						int globospos= world.countBalloons();
						if(cglobos <= globospos)
						{ funciona true;}
						 else {funciona false;}	
					case "letgo":
    				 	 int cglobos = condiciones.get(2);
    				 	 boolean chippos = world.chipExists();
    				 	 int globosdisp = world.getMyBalloons();
    				 	 int b= world.getObstacle();
							{ funciona = true; }
    				 	 if (cglobos <= globosdisp && b==0 && chippos == false)
    				 	 	{funciona = true; }
					        else { funciona = false;}
					case "nop":
						{ funciona true; }	

			case"facing":
					direccion= condiciones.get(1);
	        		switch (direccion){
	        	    case "north":
	        	    	funciona= world.facingNorth();
					case "south":
						funciona= world.facingSouth();
					case "east":
						funciona= world.facingEast();
					default:
						funciona= world.facingWest();
            	   }
			}    	 
}
{
  
}

boolean ejecutarnot()
{
	 boolean funciona;
  ArrayList condiciones= Parameter.split(",");
  String Condicion= condiciones.get(0);
  boolean comando =
}
{
} 



