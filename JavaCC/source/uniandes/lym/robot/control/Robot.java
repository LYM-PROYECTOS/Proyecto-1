/* Robot.java */
/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;

import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {

        private HashMap<String, Integer> VAR = new HashMap<String, Integer>();
        private RobotWorldDec world;


        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

        String salida=new String();

//boolean command(uniandes.lym.robot.view.Console sistema) :
  final public         boolean command(Console sistema) throws ParseException {int x,y;
                salida=new String();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MOVE:
    case PUT:
    case PICK:
    case POP:
    case HOP:
    case GO:
    case WALK:
    case JUMP:
    case LEAP:
    case TURN:
    case TURNTO:
    case DROP:
    case GET:
    case GRAB:
    case LETGO:
    case NOP:
    case idname:{
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MOVE:{
          jj_consume_token(MOVE);
          jj_consume_token(44);
          x = num();
          jj_consume_token(45);
world.moveForward(x,false);
                                                                        salida = "Command: Moveforward ";
          break;
          }
        case PUT:{
          jj_consume_token(PUT);
          jj_consume_token(44);
          put();
          jj_consume_token(45);
          break;
          }
        case PICK:{
          jj_consume_token(PICK);
          jj_consume_token(44);
          get();
          jj_consume_token(45);
          break;
          }
        case POP:{
          jj_consume_token(POP);
          jj_consume_token(44);
          x = num();
          jj_consume_token(45);
world.popBalloons(x);
                                                                 salida = "Comando:  Pop";
          break;
          }
        case HOP:{
          jj_consume_token(HOP);
          jj_consume_token(44);
          x = num();
          jj_consume_token(45);
world.moveForward(x,true);
                                                                        salida = "Command:Hopforward ";
          break;
          }
        case GO:{
          jj_consume_token(GO);
          jj_consume_token(44);
          x = num();
          jj_consume_token(46);
          y = num();
          jj_consume_token(45);
world.setPostion(x,y);
                                                                salida = "Command:GO ";
          break;
          }
        case idname:{
          jj_consume_token(idname);
          jj_consume_token(47);
          x = num();
;salida = "Command:Assignar ";
          break;
          }
        case JUMP:{
          jj_consume_token(JUMP);
          jj_consume_token(44);
          x = num();
          jj_consume_token(46);
          y = num();
          jj_consume_token(45);
world.popBalloons(x);
                                                                 salida = "Comando:  Pop";
          break;
          }
        case WALK:{
          jj_consume_token(WALK);
          jj_consume_token(44);
          Verifywalk();
          jj_consume_token(45);
          break;
          }
        case LEAP:{
          jj_consume_token(LEAP);
          jj_consume_token(44);
          VerifyLeap();
          jj_consume_token(45);
          break;
          }
        case TURN:{
          jj_consume_token(TURN);
          jj_consume_token(44);
          VerifyTurn();
          jj_consume_token(45);
          break;
          }
        case TURNTO:{
          jj_consume_token(TURNTO);
          break;
          }
        case DROP:{
          jj_consume_token(DROP);
          jj_consume_token(44);
          x = num();
          jj_consume_token(45);
world.pickChips(x);
                                                                salida = "Command:Grab ";
          break;
          }
        case GET:{
          jj_consume_token(GET);
          jj_consume_token(44);
          x = num();
          jj_consume_token(45);
world.pickChips(x);
                                                                salida = "Command:Grab ";
          break;
          }
        case GRAB:{
          jj_consume_token(GRAB);
          jj_consume_token(44);
          x = num();
          jj_consume_token(45);
world.grabBalloons(x);
                                                                salida = "Command:Grab ";
          break;
          }
        case LETGO:{
          jj_consume_token(LETGO);
          jj_consume_token(44);
          x = num();
          jj_consume_token(45);
world.putBalloons(x);
                                                                salida = "Command:letGo ";
          break;
          }
        case NOP:{
          jj_consume_token(NOP);
          jj_consume_token(44);
          jj_consume_token(45);
salida = "Command:Nop ";
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(48);
try {
                                 Thread.sleep(900);
                    } catch (InterruptedException e) {
                                        System.err.format("IOException: %s%n", e);
                            }
                        sistema.printOutput(salida);
                        {if ("" != null) return true;}
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MOVE:
        case PUT:
        case PICK:
        case POP:
        case HOP:
        case GO:
        case WALK:
        case JUMP:
        case LEAP:
        case TURN:
        case TURNTO:
        case DROP:
        case GET:
        case GRAB:
        case LETGO:
        case NOP:
        case idname:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return false;}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public void put() throws ParseException {int f=1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      jj_consume_token(46);
      f = num();
world.putChips(f); salida = "Command:  Put Chips";
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      jj_consume_token(46);
      f = num();
world.putBalloons(f); salida = "Command:  Put Balloons";
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void get() throws ParseException {int f=1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      jj_consume_token(46);
      f = num();
world.pickChips(f);salida = "Command:  Pick chips";
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      jj_consume_token(46);
      f = num();
world.grabBalloons(f);salida="Command:  Pick balloons";
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void VerifyLeap() throws ParseException {int steps=1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      steps = num();
world.moveForward(steps,false);
                                                         salida = "Command : leap S";
      break;
      }{
      steps = num();
      jj_consume_token(46);
      jj_consume_token(FRONT);
world.moveForward(steps,false);
                                                                        salida = "Command : leap front";
      break;
      }{
      steps = num();
      jj_consume_token(46);
      jj_consume_token(RIGHT);
world.turnRight();
                                                                                world.moveForward(steps,false);
                                                                                world.turnRight();
                                                                                world.turnRight();
                                                                                world.turnRight();
                                                                                salida = "Command : leap right";
      break;
      }{
      steps = num();
      jj_consume_token(46);
      jj_consume_token(LEFT);
world.turnRight();
                                                                        world.turnRight();
                                                                        world.turnRight();
                                                                        world.moveForward(steps,false);
                                                                        world.turnRight();
                                                                         salida = "Command : leap left";
      break;
      }{
      steps = num();
      jj_consume_token(46);
      jj_consume_token(BACK);
world.turnRight();
                                                                        world.turnRight();
                                                                        world.moveForward(steps,false);
                                                                        world.turnRight();
                                                                        world.turnRight();
                                                                        salida = "Command : leap back";
      break;
      }{
      steps = num();
      jj_consume_token(46);
      jj_consume_token(NORTH);
direction(0);
                                                                                world.moveForward(steps,false);
                                                                                salida = "Command : leap north";
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void VerifyTurn() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RIGHT:{
      jj_consume_token(RIGHT);
world.turnRight();
                                                salida = "Command : TURN RIGHT";
      break;
      }
    case LEFT:{
      jj_consume_token(LEFT);
world.turnRight();
                                        world.turnRight();
                                        world.turnRight();
                                        salida = "Command : TURN LEFT";
      break;
      }
    case AROUND:{
      jj_consume_token(AROUND);
world.turnRight();
                                                world.turnRight();
                                                salida = "Command : TURN AROUND";
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Verifywalk() throws ParseException {int steps=1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      steps = num();
world.moveForward(steps,false);
                                                         salida = "Command : move";
      break;
      }{
      steps = num();
      jj_consume_token(46);
      jj_consume_token(FRONT);
world.moveForward(steps,false);
                                                                        salida = "Command : moveFRONT";
      break;
      }{
      steps = num();
      jj_consume_token(46);
      jj_consume_token(RIGHT);
world.turnRight();
                                                                                world.moveForward(steps,false);
                                                                                salida = "Command : moveFRONT";
      break;
      }{
      steps = num();
      jj_consume_token(46);
      jj_consume_token(LEFT);
world.turnRight();
                                                                        world.turnRight();
                                                                        world.turnRight();
                                                                        world.moveForward(steps,false);
                                                                         salida = "Command : moveLEFT";
      break;
      }{
      steps = num();
      jj_consume_token(46);
      jj_consume_token(BACK);
world.turnRight();
                                                                        world.turnRight();
                                                                        world.moveForward(steps,false);
                                                                        salida = "Command : moveLEFT";
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */
  final public         int num() throws ParseException, Error {int total=1;
    jj_consume_token(NUM);
try
                        {
                                total = Integer.parseInt(token.image);
                        }
                        catch (NumberFormatException ee)
                        {
                                {if (true) throw new Error("Number out of bounds: "+token.image+" !!");}
                        }
                        {if ("" != null) return total;}
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x7fff80,0x7fff80,0x7fff81,0x80000000,0x80000000,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x2,0x2,0x2,0x1,0x1,0x4,0xb0,0x4,};
	}

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RobotTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[49];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 8; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 49; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
